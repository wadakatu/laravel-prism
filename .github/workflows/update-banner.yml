name: Update Banner Version

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-banner:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Get latest release version
      id: get_version
      run: |
        # Get the latest release version
        VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        
        # If no release found, use v1.0.0 as default
        if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
          VERSION="v1.0.0"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Latest version: $VERSION"
    
    - name: Setup Git
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Check current version in banner
      id: check_current
      run: |
        # Debug: Show the relevant line from banner
        echo "Banner version line:"
        grep '<text x="100" y="250"' assets/banner.svg || echo "Version line not found"
        
        # Extract current version from banner using sed
        CURRENT_VERSION=$(sed -n 's/.*<text x="100" y="250"[^>]*>\([^<]*\)<\/text>.*/\1/p' assets/banner.svg | head -1)
        
        # If empty, try to find any version pattern
        if [ -z "$CURRENT_VERSION" ]; then
          echo "Version not found at expected location, searching for v*.*.* pattern..."
          CURRENT_VERSION=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' assets/banner.svg | head -1 || echo "v0.0.0")
        fi
        
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version in banner: $CURRENT_VERSION"
        echo "New version will be: ${{ steps.get_version.outputs.VERSION }}"
    
    - name: Update banner and create PR
      if: ${{ steps.check_current.outputs.CURRENT_VERSION != steps.get_version.outputs.VERSION }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a unique branch name
        BRANCH_NAME="update-banner-$(date +%Y%m%d%H%M%S)"
        echo "Creating branch: $BRANCH_NAME"
        
        # Create and checkout new branch
        git checkout -b $BRANCH_NAME
        
        # Update the banner
        sed -i "s|<text x=\"100\" y=\"250\"[^>]*>[^<]*</text>|<text x=\"100\" y=\"250\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#00FF00\">${{ steps.get_version.outputs.VERSION }}</text>|g" assets/banner.svg
        
        # Verify the change was made
        echo "Updated banner content:"
        grep -E '<text x="100" y="250"[^>]*>[^<]*</text>' assets/banner.svg || true
        
        # Add and commit
        git add assets/banner.svg
        git commit -m "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}"
        
        # Push the branch
        git push -u origin $BRANCH_NAME
        
        # Wait a moment for GitHub to process the push
        sleep 3
        
        # Create PR
        PR_URL=$(gh pr create \
          --title "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}" \
          --body $'Automated PR to update banner version after release ${{ steps.get_version.outputs.VERSION }}\n\nThis PR was automatically generated by the Update Banner Version workflow.' \
          --base main \
          --head $BRANCH_NAME)
        
        echo "Created PR: $PR_URL"
        
        # Extract PR number and enable auto-merge
        PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
        gh pr merge $PR_NUMBER --auto --merge
    
    - name: Cleanup old branches
      if: always()
      continue-on-error: true
      run: |
        # List and delete old update-banner branches
        gh api repos/${{ github.repository }}/branches --paginate | \
        jq -r '.[] | select(.name | startswith("update-banner-")) | .name' | \
        while read branch; do
          echo "Deleting old branch: $branch"
          git push origin --delete "$branch" || true
        done