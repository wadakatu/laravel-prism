name: Update Banner Version

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-banner:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Get latest release version
      id: get_version
      run: |
        VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=update-banner-$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Setup Git
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Update banner SVG
      run: |
        sed -i "s|<text x=\"100\" y=\"250\"[^>]*>[^<]*</text>|<text x=\"100\" y=\"250\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#00FF00\">${{ steps.get_version.outputs.VERSION }}</text>|g" assets/banner.svg
    
    - name: Create branch and commit changes
      id: commit
      run: |
        # Check if there are changes
        if [[ -z $(git status --porcelain assets/banner.svg) ]]; then
          echo "No changes to commit"
          echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Create a new branch
        git checkout -b ${{ steps.get_version.outputs.BRANCH_NAME }}
        
        # Commit changes
        git add assets/banner.svg
        git commit -m "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}"
        
        # Push the branch
        git push origin ${{ steps.get_version.outputs.BRANCH_NAME }}
        
        echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request
      if: steps.commit.outputs.HAS_CHANGES == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create PR
        PR_URL=$(gh pr create \
          --title "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}" \
          --body "Automated PR to update banner version after release ${{ steps.get_version.outputs.VERSION }}" \
          --base main \
          --head ${{ steps.get_version.outputs.BRANCH_NAME }})
        
        echo "Created PR: $PR_URL"
        
        # Extract PR number from URL
        PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
        
        # Enable auto-merge
        gh pr merge $PR_NUMBER --auto --merge
        
    - name: Cleanup old update-banner branches
      if: always()
      continue-on-error: true
      run: |
        # List and delete old update-banner branches
        git branch -r | grep 'origin/update-banner-' | sed 's/origin\///' | while read branch; do
          echo "Deleting old branch: $branch"
          git push origin --delete "$branch" || true
        done