name: Update Banner Version

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-banner:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Get latest release version
      id: get_version
      run: |
        # Get the latest release version
        VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
        
        # If no release found, use v1.0.0 as default
        if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
          VERSION="v1.0.0"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Latest version: $VERSION"
    
    - name: Setup Git
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Check current version in banner
      id: check_current
      run: |
        # Extract current version from banner
        CURRENT_VERSION=$(grep -oP '(?<=<text[^>]*>)[^<]*(?=</text>)' assets/banner.svg | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' || echo "")
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version in banner: $CURRENT_VERSION"
    
    - name: Update banner and create PR
      if: steps.check_current.outputs.CURRENT_VERSION != steps.get_version.outputs.VERSION
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a unique branch name
        BRANCH_NAME="update-banner-$(date +%Y%m%d%H%M%S)"
        echo "Creating branch: $BRANCH_NAME"
        
        # Create and checkout new branch
        git checkout -b $BRANCH_NAME
        
        # Update the banner
        sed -i "s|<text x=\"100\" y=\"250\"[^>]*>[^<]*</text>|<text x=\"100\" y=\"250\" text-anchor=\"middle\" font-family=\"monospace\" font-size=\"16\" fill=\"#00FF00\">${{ steps.get_version.outputs.VERSION }}</text>|g" assets/banner.svg
        
        # Verify the change was made
        echo "Updated banner content:"
        grep -E '<text x="100" y="250"[^>]*>[^<]*</text>' assets/banner.svg || true
        
        # Add and commit
        git add assets/banner.svg
        git commit -m "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}"
        
        # Push the branch
        git push -u origin $BRANCH_NAME
        
        # Wait a moment for GitHub to process the push
        sleep 3
        
        # Create PR
        PR_URL=$(gh pr create \
          --title "chore: update banner version to ${{ steps.get_version.outputs.VERSION }}" \
          --body $'Automated PR to update banner version after release ${{ steps.get_version.outputs.VERSION }}\n\nThis PR was automatically generated by the Update Banner Version workflow.' \
          --base main \
          --head $BRANCH_NAME)
        
        echo "Created PR: $PR_URL"
        
        # Extract PR number and enable auto-merge
        PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
        gh pr merge $PR_NUMBER --auto --merge
    
    - name: Cleanup old branches
      if: always()
      continue-on-error: true
      run: |
        # Delete branches older than 7 days
        git for-each-ref --format='%(refname:short) %(committerdate:unix)' refs/remotes/origin | \
        grep 'update-banner-' | \
        while read branch timestamp; do
          branch_name=$(echo $branch | sed 's/origin\///')
          age_days=$(( ($(date +%s) - $timestamp) / 86400 ))
          if [ $age_days -gt 7 ]; then
            echo "Deleting old branch: $branch_name (age: $age_days days)"
            git push origin --delete "$branch_name" || true
          fi
        done